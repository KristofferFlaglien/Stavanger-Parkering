# This workflow triggers when code is pushed to the main branch
name: Deploy to Databricks Prod

on:
  push:
    branches:
      - main  # Only run when pushing to main branch (production deployments)

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      # STEP 1: Checkout code
      - uses: actions/checkout@v3

      # STEP 2: Install Databricks CLI
      - name: Install Databricks CLI
        run: pip install --upgrade databricks-cli requests

      # STEP 3: Configure Databricks CLI
      - name: Configure Databricks CLI
        run: |
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_HOST }}
          token = ${{ secrets.DATABRICKS_TOKEN }}
          EOF

      # STEP 4: Deploy notebooks
      - name: Deploy notebooks to Databricks
        run: |
          set -euo pipefail
          for file in ./notebooks/*.ipynb; do
            echo "Deploying $file"
            filename=$(basename "$file" .ipynb)
            databricks workspace import "$file" "/Shared/${filename}_prod" -f SOURCE -l PYTHON --overwrite
          done

      # STEP 5: Deploy Lakeview dashboards
      - name: Deploy Lakeview dashboards
        run: |
          python3 - << 'EOF'
          import os, glob, json, requests

          host = os.environ['DATABRICKS_HOST']
          token = os.environ['DATABRICKS_TOKEN']
          headers = {
              'Authorization': f'Bearer {token}',
              'Content-Type': 'application/json'
          }

          def find_dashboard_by_name(name):
              """Return dashboard_id + etag if dashboard exists, else None"""
              url = f"{host}/api/2.0/lakeview/dashboards"
              resp = requests.get(url, headers=headers)
              if resp.status_code != 200:
                  print(f"⚠️ Could not list dashboards: {resp.text}")
                  return None
              dashboards = resp.json().get("dashboards", [])
              for d in dashboards:
                  if d.get("display_name") == name:
                      return d["dashboard_id"], d["etag"]
              return None

          for file in glob.glob('./dashboards/*.lvdash.json'):
              print(f"Deploying Lakeview dashboard: {file}")
              with open(file, 'r') as f:
                  dashboard = json.load(f)

              display_name = dashboard.get("display_name") or os.path.splitext(os.path.basename(file))[0]

              # Check if dashboard already exists
              existing = find_dashboard_by_name(display_name)

              if existing:
                  dashboard_id, etag = existing
                  print(f"🔄 Updating existing dashboard: {display_name} (id={dashboard_id})")
                  url = f"{host}/api/2.0/lakeview/dashboards/{dashboard_id}"
                  headers["If-Match"] = etag
                  resp = requests.patch(url, headers=headers, json=dashboard)
              else:
                  print(f"➕ Creating new dashboard: {display_name}")
                  url = f"{host}/api/2.0/lakeview/dashboards"
                  resp = requests.post(url, headers=headers, json=dashboard)

              if resp.status_code in (200, 201):
                  print(f"✅ Success: {display_name}")
              else:
                  print(f"❌ Failed {display_name}: {resp.status_code} {resp.text}")
          EOF

      # STEP 6: Create a git tag for release
      - name: Create Git tag for release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag "prod-deploy-$(date +'%Y-%m-%d-%H-%M')" -m "Deployed to production"
          git push origin --tags

      # STEP 7: Notify success
      - name: Notify on success
        if: success()
        run: echo "✅ Deployment to production successful!"

      # STEP 8: Notify failure
      - name: Notify on failure
        if: failure()
        run: echo "❌ Deployment to production failed!"

