# Workflow: Deploy to Databricks Production
# Triggers when code is pushed to the 'main' branch
name: Deploy to Databricks Prod

on:
  push:
    branches:
      - main  # Only deploy when the main branch is updated

jobs:
  deploy:
    runs-on: ubuntu-latest  # Run workflow on latest Ubuntu VM
    permissions:
      contents: write  # Required to push git tags
    env:
      # Environment variables for Databricks credentials (stored as GitHub secrets)
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v3

      # Step 2: Install necessary Python packages
      # - databricks-cli: to deploy notebooks
      # - requests: to call Lakeview dashboard REST API
      - name: Install dependencies
        run: pip install --upgrade databricks-cli requests

      # Step 3: Configure Databricks CLI
      # Create ~/.databrickscfg with host and token so CLI commands can authenticate
      - name: Configure Databricks CLI
        run: |
          cat > ~/.databrickscfg << EOF
          [DEFAULT]
          host = ${{ secrets.DATABRICKS_HOST }}
          token = ${{ secrets.DATABRICKS_TOKEN }}
          EOF

      # Step 4: Deploy notebooks, jobs and dashboards using Python script
      # This replaces embedded scripts and centralizes all deployment logic
      - name: Deploy notebooks, jobs and Lakeview dashboards
        run: python3 scripts/deploy_to_databricks.py

      # Step 5: Tag the deployment in GitHub for traceability
      - name: Create Git tag for release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag "prod-deploy-$(date +'%Y-%m-%d-%H-%M')" -m "Deployed to production"
          git push origin --tags

      # Step 6: Notify success
      - name: Notify on success
        if: success()
        run: echo "✅ Deployment to production successful!"

      # Step 7: Notify failure
      - name: Notify on failure
        if: failure()
        run: echo "❌ Deployment to production failed!"