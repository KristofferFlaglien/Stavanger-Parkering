name: Deploy to Databricks Prod

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Databricks CLI
        run: pip install --upgrade databricks-cli

      - name: Deploy notebooks to Databricks
        run: |
          set -euo pipefail
          for file in ./notebooks/*.ipynb; do
            echo "Deploying $file"
            filename=$(basename "$file" .ipynb)
            databricks workspace import "$file" "/Shared/${filename}_prod" -f SOURCE -l PYTHON --overwrite
          done

      - name: Create Git tag for release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag "prod-deploy-$(date +'%Y-%m-%d-%H-%M')" -m "Deployed to production"
          git push origin --tags

      - name: Notify on success
        if: success()
        run: echo "✅ Deployment to production successful!"

      - name: Notify on failure
        if: failure()
        run: echo "❌ Deployment to production failed!"

      - name: Deploy Lakeview dashboards (API method)
        run: |
python - << 'EOF'
import requests
import json
import os
import glob

# Databricks connection details
host = os.environ['DATABRICKS_HOST']
token = os.environ['DATABRICKS_TOKEN']
headers = {
    'Authorization': f'Bearer {token}',
    'Content-Type': 'application/json'
}

# Find and deploy dashboard files
dashboard_files = glob.glob('./dashboards/*.lvdash.json')

for dashboard_file in dashboard_files:
    print(f"Deploying dashboard: {dashboard_file}")

    # Read dashboard definition
    with open(dashboard_file, 'r') as f:
        dashboard_data = json.load(f)
    
    # Ensure the dashboard has a name
    dashboard_data["name"] = os.path.splitext(os.path.basename(dashboard_file))[0]

    # API endpoint for dashboards
    api_url = f"{host}/api/2.0/preview/sql/dashboards"
    
    try:
        response = requests.post(api_url, headers=headers, json=dashboard_data)
        if response.status_code == 200:
            print(f"✅ Dashboard deployed successfully: {dashboard_file}")
        else:
            print(f"❌ Failed to deploy dashboard {dashboard_file}: {response.text}")
    except Exception as e:
        print(f"❌ Error deploying dashboard {dashboard_file}: {str(e)}")
EOF

